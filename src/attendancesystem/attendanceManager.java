/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package attendancesystem;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author acer
 */
public class attendanceManager extends javax.swing.JFrame {

    /**
     * Creates new form attendanceManager
     */
    public attendanceManager() {

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        date = new javax.swing.JFormattedTextField();
        endTime = new javax.swing.JFormattedTextField();
        startTime = new javax.swing.JFormattedTextField();
        intake = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        intakeCode = new javax.swing.JTextField();
        createList = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        status = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        course = new javax.swing.JComboBox<>();
        courseName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        view = new javax.swing.JButton();
        saveAttendance = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Attendance Manager"));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jToolBar1.setRollover(true);
        jPanel1.add(jToolBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, -1, -1));

        date.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        date.setText("M/d/yy");
        jPanel1.add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 31, 200, 30));

        endTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        jPanel1.add(endTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 111, 200, 30));

        startTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        jPanel1.add(startTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 71, 200, 30));

        intake.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        intake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intakeActionPerformed(evt);
            }
        });
        jPanel1.add(intake, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, 200, -1));

        jLabel1.setText("Date");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, -1));

        jLabel2.setText("Start time");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        jLabel3.setText("End time");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, -1));

        jLabel4.setText("Intake");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, -1, -1));

        intakeCode.setEditable(false);
        jPanel1.add(intakeCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 200, 30));

        createList.setText("create");
        createList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createListActionPerformed(evt);
            }
        });
        jPanel1.add(createList, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 80, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Name", "Status"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, -1, 420));

        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(status, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 310, 180, -1));

        jLabel5.setText("Status");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 290, -1, -1));

        course.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        course.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseActionPerformed(evt);
            }
        });
        jPanel1.add(course, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 240, 200, -1));

        courseName.setEditable(false);
        jPanel1.add(courseName, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 270, 200, 30));

        jLabel6.setText("Module");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, -1, -1));

        view.setText("view");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });
        jPanel1.add(view, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 130, -1, -1));

        saveAttendance.setText("Save");
        saveAttendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAttendanceActionPerformed(evt);
            }
        });
        jPanel1.add(saveAttendance, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 380, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 750, 750));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String getDate;
    private String getStartTime;
    private String getEndTime;
    private String getIntake;
    private String getCourse;
    User user = new User();

    private class attendanceComboBox extends PopulateComboBox {

        String intake_Code = intakeCode.getText();

        @Override
        public String[] readCourse() {

            ArrayList<String> arr = new ArrayList<>();
            File file = new File("intakedb.txt");
            String line;
            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                //ToDO
                while ((line = br.readLine()) != null) {
                    if (line.contains(intake_Code)) {

                        String[] data = line.split(";");
                        arr.add(data[1]);
                        arr.add(data[3]);
                        arr.add(data[5]);
                    }
                }

            } catch (IOException ex) {
                Logger.getLogger(lecturerManager.class.getName()).log(Level.SEVERE, null, ex);
            }

            return arr.toArray(new String[arr.size()]);

        }

        @Override
        public String[] normalRead() {

            ArrayList<String> arr = new ArrayList<>();
            File file = new File("intakedb.txt");
            String line;
            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                //ToDO
                while ((line = br.readLine()) != null) {
                    String[] data = line.split(";");
                    if (line.contains(User.currentUser)) {
                        arr.add(data[0]);
                    }
                }

            } catch (IOException ex) {
                Logger.getLogger(lecturerManager.class.getName()).log(Level.SEVERE, null, ex);
            }

            return arr.toArray(new String[arr.size()]);
        }

        @Override
        public void populate() {

            String[] lines = normalRead();
            if (user.rootPermission(User.currentUser)) {
                lines = readIntake();
            }

            intake.removeAllItems();

            for (String str : lines) {
                intake.addItem(str);
            }

        }

        @Override
        public void populateStat() {

            String[] arr = {"Present", "Absent", "Late"};

            status.removeAllItems();

            for (String str : arr) {
                status.addItem(str);
            }

            if (user.rootPermission(User.currentUser)) {
                status.removeAllItems();
                status.addItem("Absent with Reason");
            }

        }

        @Override
        public void populateModule() {

            String[] lines;
            lines = readCourse();

            course.removeAllItems();

            for (String str : lines) {
                course.addItem(str);
            }
        }

    }

    private class attendTable implements fillTable {
        
        boolean bool = false;
        @Override
        public void fillTable() {
            System.out.println("printing table");
        }

        @Override
        public void fillRows() {
            String line;
            String intake = intakeCode.getText();
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            File file = new File("studentdb.txt");
            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                //ToDO
                while ((line = br.readLine()) != null) {
                    String[] data = line.split(";");
                    String[] list = {data[0], data[1] + " " + data[2]};
                    if (line.length() > 0 && line.contains(intake)) {
                        dtm.addRow(list);
                        bool = true;
                    }

                }

            } catch (IOException ex) {
                Logger.getLogger(lecturerManager.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(!bool) {
                JOptionPane.showMessageDialog(null, "No information found", "TEST", JOptionPane.ERROR_MESSAGE);
            }
        }

        @Override
        public void delRows() {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            int rowCount = dtm.getRowCount();

            for (int i = rowCount - 1; i >= 0; i--) {
                dtm.removeRow(i);
            }
        }
    }

    private class attendanceData {

        private int check;

        private attendanceData() {
            this.check = 0;
        }

        public void addAttendance(String date, String startTime, String endTime, String intake, String course) throws IOException {

            try (FileWriter fw = new FileWriter("attendancedb.txt", true); BufferedWriter bw = new BufferedWriter(fw); PrintWriter out = new PrintWriter(bw)) {

                for (int i = 0; i < jTable1.getRowCount(); i++) {
                    out.print(date + ";" + startTime + ";" + endTime + ";" + intake + ";" + course + ";");
                    for (int j = 0; j < jTable1.getColumnCount(); j++) {
                        out.print(jTable1.getModel().getValueAt(i, j) + ";");
                    }
                    out.print("\n");
                }
            } catch (IOException ex) {
                Logger.getLogger(lecturerManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        public void verifyAttendance(String date, String startTime, String endTime) throws FileNotFoundException {

            String currentLine;
            File file = new File("attendancedb.txt");
            try (Scanner scan = new Scanner(file)) {
                scan.useDelimiter(";");
                while (scan.hasNextLine()) {

                    currentLine = scan.nextLine();

                    if (currentLine.contains(date)) {
                        if (currentLine.contains(startTime) || currentLine.contains(endTime)) {
                            System.out.println("found");
                            check = -1;
                            break;
                        }

                    } else {
                        System.out.println("not found");
                    }
                }

            }
        }

        public void searchAttendance(String date, String startTime, String endTime, String intake, String course) throws IOException {

            String line;
            boolean bool = false;
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            File file = new File("attendancedb.txt");
            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                while ((line = br.readLine()) != null) {
                    String[] data = line.split(";");
                    String[] list = {data[5], data[6], data[7]};
                    if (line.length() > 0 && line.contains(date) && line.contains(startTime) && line.contains(endTime) && line.contains(intake)) {
                        if (line.contains(course)) {
                            dtm.addRow(list);
                            bool = true;
                        }
                    }

                }
            } catch (IOException ex) {
                Logger.getLogger(lecturerManager.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(!bool) {
                JOptionPane.showMessageDialog(null, "No information found", "TEST", JOptionPane.ERROR_MESSAGE);
            }
        }

        public void deleteAttendance(String date, String startTime, String endTime) throws FileNotFoundException, IOException {

            File inputFile = new File("attendancedb.txt");
            File tempFile = new File("temp.txt");

            try (BufferedReader reader = new BufferedReader(new FileReader(inputFile))) {

                try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

                    String currentLine;

                    while ((currentLine = reader.readLine()) != null) {

                        String trimmedLine = currentLine.trim();
                        if (!(trimmedLine.contains(date) && trimmedLine.contains(startTime) && trimmedLine.contains(endTime))) {
                            writer.write(currentLine + System.getProperty("line.separator"));
                        }
                    }
                }

            }

            inputFile.delete();
            boolean successfull = tempFile.renameTo(inputFile);
            System.out.println(successfull);

        }

        public boolean validation() {
            return check == 0;
        }

    }


    private void intakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intakeActionPerformed
        // TODO add your handling code here:

        String value = (String) intake.getSelectedItem();
        intakeCode.setText(value);
        PopulateComboBox pop = new attendanceComboBox();
        pop.populateModule();

    }//GEN-LAST:event_intakeActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:

        PopulateComboBox pop = new attendanceComboBox();
        if (user.rootPermission(User.currentUser)) {
            pop.readIntake();
            createList.setEnabled(false);
            JOptionPane.showMessageDialog(null, "Welcome, you have root priviledges");
        } else {
            pop.normalRead();
            course.setEnabled(false);
            JOptionPane.showMessageDialog(null, "Welcome " + User.currentUser + ", you only have normal priviledges");
            try {
                searchLect sl = new searchLect();
                sl.search(User.currentUser);
                ArrayList<String> list = sl.getList();
                courseName.setText(list.get(5));
            } catch (IOException ex) {
                Logger.getLogger(attendanceManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        pop.populate();
        pop.populateStat();

    }//GEN-LAST:event_formWindowOpened

    private void createListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createListActionPerformed
        // TODO add your handling code here:
        boolean check = true;
        this.getDate = date.getText();
        this.getStartTime = startTime.getText();
        this.getEndTime = endTime.getText();
        this.getIntake = intakeCode.getText();
        this.getCourse = courseName.getText();

        if (getDate.isEmpty()) {
            check = false;
        }
        if (getStartTime.isEmpty()) {
            check = false;
        }
        if (getEndTime.isEmpty()) {
            check = false;
        }
        if (getEndTime.equals(getStartTime)) {
            check = false;
        }
        if (getIntake.equals("")) {
            check = false;
        }
        if (getCourse.equals("")) {
            check = false;
        }

        if (check) {
            attendanceData ad = new attendanceData();
            try {
                ad.verifyAttendance(getDate, getStartTime, getEndTime);
                if (ad.validation()) {
                    fillTable ft = new attendTable();
                    ft.delRows();
                    ft.fillRows();
                } else {
                    JOptionPane.showMessageDialog(null, "Attendance record already created", "TEST", JOptionPane.ERROR_MESSAGE);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(attendanceManager.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please fill in all fields correctly", "TEST", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_createListActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:

        int selectedRowIndex = jTable1.getSelectedRow();

        jTable1.setValueAt(status.getSelectedItem(), selectedRowIndex, 2);
    }//GEN-LAST:event_jTable1MouseClicked

    private void courseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseActionPerformed
        // TODO add your handling code here:
        if (user.rootPermission(User.currentUser)) {
            String value = (String) course.getSelectedItem();
            courseName.setText(value);
        }

    }//GEN-LAST:event_courseActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:

        boolean check = true;
        this.getDate = date.getText();
        this.getStartTime = startTime.getText();
        this.getEndTime = endTime.getText();
        this.getIntake = intakeCode.getText();
        this.getCourse = courseName.getText();

        if (getDate.isEmpty()) {
            check = false;
        }
        if (getStartTime.isEmpty()) {
            check = false;
        }
        if (getEndTime.isEmpty()) {
            check = false;
        }
        if (getEndTime.equals(getStartTime)) {
            check = false;
        }
        if (getIntake.equals("")) {
            check = false;
        }
        if (getCourse.equals("")) {
            check = false;
        }
        if (check) {
            attendanceData ad = new attendanceData();
            try {
                fillTable ft = new attendTable();
                ft.delRows();
                ad.searchAttendance(getDate, getStartTime, getEndTime, getIntake, getCourse);

            } catch (IOException ex) {
                Logger.getLogger(attendanceManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please fill in all fields correctly", "TEST", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_viewActionPerformed

    private void saveAttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAttendanceActionPerformed
        // TODO add your handling code here:

        boolean check = true;
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        this.getDate = date.getText();
        this.getStartTime = startTime.getText();
        this.getEndTime = endTime.getText();
        this.getIntake = intakeCode.getText();
        this.getCourse = courseName.getText();

        if (!(dtm.getRowCount() > 0)) {
            check = false;
        }

        for (int i = 0; i < dtm.getRowCount(); i++) {
            if (dtm.getValueAt(i, 2) == null) {
                check = false;
            }
        }

        if (check) {
            attendanceData ad = new attendanceData();
            try {
                ad.deleteAttendance(getDate, getStartTime, getEndTime);
                ad.addAttendance(getDate, getStartTime, getEndTime, getIntake, getCourse);
                JOptionPane.showMessageDialog(null, "Data is saved successfully");
            } catch (IOException ex) {
                Logger.getLogger(attendanceManager.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Attendance must be taken before saving", "TEST", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_saveAttendanceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(attendanceManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(attendanceManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(attendanceManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(attendanceManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new attendanceManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> course;
    private javax.swing.JTextField courseName;
    private javax.swing.JButton createList;
    private javax.swing.JFormattedTextField date;
    private javax.swing.JFormattedTextField endTime;
    private javax.swing.JComboBox<String> intake;
    private javax.swing.JTextField intakeCode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton saveAttendance;
    private javax.swing.JFormattedTextField startTime;
    private javax.swing.JComboBox<String> status;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables
}
