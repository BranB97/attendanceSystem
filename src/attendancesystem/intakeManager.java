/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package attendancesystem;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author acer
 */
public class intakeManager extends javax.swing.JFrame {

    /**
     * Creates new form intakeManager1
     */
    public intakeManager() {
        this.count = 0;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        intakeCode = new javax.swing.JTextField();
        potions = new javax.swing.JCheckBox();
        charms = new javax.swing.JCheckBox();
        datd = new javax.swing.JCheckBox();
        history = new javax.swing.JCheckBox();
        transfiguration = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lect_ID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        assignButton = new javax.swing.JButton();
        selectedIntake = new javax.swing.JTextField();
        course = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        unassignButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Intake Manager"));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(intakeCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 280, 40));

        potions.setText("Potions");
        potions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                potionsActionPerformed(evt);
            }
        });
        jPanel1.add(potions, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 150, -1, -1));

        charms.setText("Charms");
        charms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                charmsActionPerformed(evt);
            }
        });
        jPanel1.add(charms, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 270, -1, -1));

        datd.setText("Defence Against the Dark Arts");
        datd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datdActionPerformed(evt);
            }
        });
        jPanel1.add(datd, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 180, -1, -1));

        history.setText("History of Magic");
        history.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyActionPerformed(evt);
            }
        });
        jPanel1.add(history, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 210, -1, -1));

        transfiguration.setText("Transfiguration");
        transfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transfigurationActionPerformed(evt);
            }
        });
        jPanel1.add(transfiguration, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 240, -1, -1));

        jLabel1.setText("Module");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 210, -1, -1));

        jLabel2.setText("Intake code");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        jButton1.setText("Create");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 290, -1, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Assign Lecturer"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lect_ID.setEditable(false);
        jPanel2.add(lect_ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 230, 30));

        jLabel3.setText("Module");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        jLabel4.setText("Intake Code");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        assignButton.setText("Assign");
        assignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButtonActionPerformed(evt);
            }
        });
        jPanel2.add(assignButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, -1, -1));

        selectedIntake.setEditable(false);
        jPanel2.add(selectedIntake, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, 230, 30));

        course.setEditable(false);
        jPanel2.add(course, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 230, 30));

        jLabel5.setText("Lecturer ID");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        unassignButton.setText("Unassign");
        unassignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unassignButtonActionPerformed(evt);
            }
        });
        jPanel2.add(unassignButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 160, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 352, 383, 190));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lecturer ID", "First Name", "Last Name", "Email", "Contact No", "Module"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(421, 29, 550, 290));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Intake Code", "Module1", "Lect1", "Module2", "Lect2", "Module3", "Lect3"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 340, 520, 130));

        jButton2.setText("Refresh table");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 490, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 6, 1020, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int count;

    private class fillTable1 implements fillTable {

        @Override
        public void fillTable() {
            System.out.println("printing table");
        }

        @Override
        public void fillRows() {
            String line;
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            File file = new File("lectdb.txt");
            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                //ToDO
                while ((line = br.readLine()) != null) {
                    String[] data = line.split(";");
                    if (line.length() > 0) {
                        dtm.addRow(data);
                    }

                }

            } catch (IOException ex) {
                Logger.getLogger(lecturerManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        public void delRows() {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            int rowCount = dtm.getRowCount();

            for (int i = rowCount - 1; i >= 0; i--) {
                dtm.removeRow(i);
            }
        }
    }

    private class fillTable2 implements fillTable {

        @Override
        public void fillTable() {
            System.out.println("printing table");
        }

        @Override
        public void fillRows() {
            String line;
            DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
            File file = new File("intakedb.txt");
            /*ArrayList<String> data = new ArrayList<>(); */

            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                //ToDO
                while ((line = br.readLine()) != null) {
                    String[] data = line.split(";");
                    if (line.length() > 0) {
                        dtm.addRow(data);
                    }

                }

            } catch (IOException ex) {
                Logger.getLogger(lecturerManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        public void delRows() {
            DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
            int rowCount = dtm.getRowCount();

            for (int i = rowCount - 1; i >= 0; i--) {
                dtm.removeRow(i);
            }
        }
    }

    private void potionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_potionsActionPerformed
        // TODO add your handling code here:

        if (potions.isSelected()) {
            this.count++;
        } else {
            this.count--;
        }
    }//GEN-LAST:event_potionsActionPerformed

    private void charmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charmsActionPerformed
        // TODO add your handling code here:

        if (charms.isSelected()) {
            this.count++;
        } else {
            this.count--;
        }
    }//GEN-LAST:event_charmsActionPerformed

    private void datdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datdActionPerformed
        // TODO add your handling code here:

        if (datd.isSelected()) {
            this.count++;
        } else {
            this.count--;
        }
    }//GEN-LAST:event_datdActionPerformed

    private void historyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyActionPerformed
        // TODO add your handling code here:

        if (history.isSelected()) {
            this.count++;
        } else {
            this.count--;
        }
    }//GEN-LAST:event_historyActionPerformed

    private void transfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transfigurationActionPerformed
        // TODO add your handling code here:

        if (transfiguration.isSelected()) {
            this.count++;
        } else {
            this.count--;
        }
    }//GEN-LAST:event_transfigurationActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        boolean check = true;
        String intake = intakeCode.getText();
        ArrayList<String> list = new ArrayList<>();

        if (intake.equals("")) {
            check = false;
        }
        if (potions.isSelected()) {

            list.add("Potions");
        }
        if (datd.isSelected()) {

            list.add("Defense Against the Dark Arts");
        }
        if (history.isSelected()) {

            list.add("History of Magic");
        }
        if (transfiguration.isSelected()) {

            list.add("Transfiguration");
        }
        if (charms.isSelected()) {

            list.add("Charms");
        }

        if (check && count == 3) {

            try {
                createIntake make = new createIntake();
                make.verifyIntake(intake);
                if (make.validation()) {
                    String slot1 = "n/a";
                    String slot2 = "n/a";
                    String slot3 = "n/a";
                    make.create(intake, list.get(0), slot1, list.get(1), slot2, list.get(2), slot3);
                    JOptionPane.showMessageDialog(null, "Data is saved successfully");
                } else {
                    JOptionPane.showMessageDialog(null, "Intake already exist", "TEST", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                Logger.getLogger(intakeManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {

            JOptionPane.showMessageDialog(null, "Please fill in all fields correctly", "TEST", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        fillTable ft1 = new fillTable1();
        ft1.delRows();
        ft1.fillRows();
        
        fillTable ft2 = new fillTable2();
        ft2.delRows();
        ft2.fillRows();
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        fillTable ft1 = new fillTable1();
        ft1.fillRows();
        
        fillTable ft2 = new fillTable2();
        ft2.fillRows();
    }//GEN-LAST:event_formWindowOpened

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        
        DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
        
        int selectedRowIndex = jTable2.getSelectedRow();
        
        selectedIntake.setText(dtm.getValueAt(selectedRowIndex, 0).toString());
        
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        
        int selectedRowIndex = jTable1.getSelectedRow();
        
        lect_ID.setText(dtm.getValueAt(selectedRowIndex, 0).toString());
        course.setText(dtm.getValueAt(selectedRowIndex, 5).toString());
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void assignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignButtonActionPerformed
        // TODO add your handling code here:
        
        boolean check = true;
        String getIntake = selectedIntake.getText();
        String getLectID = lect_ID.getText();
        String getCourse = course.getText();
        
        if(getIntake.equals("") || getLectID.equals("")) {
            check = false;
        }
        
        if(check) {
            
            assignLect al = new assignLect();
            try {
                ArrayList<String> list = al.assign(getIntake, getLectID, getCourse);
                if(al.validation()) {
                    
                    createIntake ci = new createIntake();
                    ci.delete(getIntake);
                    ci.create(getIntake, list.get(1), list.get(2), list.get(3), list.get(4), list.get(5), list.get(6));
                    JOptionPane.showMessageDialog(null, "Data is saved successfully");
                    
                } else {
                    JOptionPane.showMessageDialog(null, "Unable to assign, lecturer subjects do not match or already assigned", "TEST", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                Logger.getLogger(intakeManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "please enter all fields", "TEST", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_assignButtonActionPerformed

    private void unassignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unassignButtonActionPerformed
        // TODO add your handling code here:
        
        boolean check = true;
        String getIntake = selectedIntake.getText();
        String getLectID = lect_ID.getText();
        String getCourse = course.getText();
        
        if(getIntake.equals("") || getLectID.equals("")) {
            check = false;
        }
        
        if(check) {
            
            assignLect al = new assignLect();
            try {
                ArrayList<String> list = al.unassign(getIntake, getLectID, getCourse);
                if(al.validation()) {
                    
                    createIntake ci = new createIntake();
                    ci.delete(getIntake);
                    ci.create(getIntake, list.get(1), list.get(2), list.get(3), list.get(4), list.get(5), list.get(6));
                    JOptionPane.showMessageDialog(null, "Data is removed successfully");
                    
                } else {
                    JOptionPane.showMessageDialog(null, "Unable to unassign, no lecturer available", "TEST", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                Logger.getLogger(intakeManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "please enter all fields", "TEST", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_unassignButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(intakeManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(intakeManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(intakeManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(intakeManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new intakeManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignButton;
    private javax.swing.JCheckBox charms;
    private javax.swing.JTextField course;
    private javax.swing.JCheckBox datd;
    private javax.swing.JCheckBox history;
    private javax.swing.JTextField intakeCode;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField lect_ID;
    private javax.swing.JCheckBox potions;
    private javax.swing.JTextField selectedIntake;
    private javax.swing.JCheckBox transfiguration;
    private javax.swing.JButton unassignButton;
    // End of variables declaration//GEN-END:variables
}
